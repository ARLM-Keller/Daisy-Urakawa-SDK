[[TOC]]

= SDK 2.0 kick-off meeting =

== Dates ==

 * 2008-06-17 (Tuesday)
 * 2008-06-18 (Wednesday)

== Venue ==

Kindly hosted by DBB, in Copenhagen (Denmark).

== Participants ==

 * Ole Holst Andersen (DAISY)
 * Daniel Weck (DAISY)

== Objectives ==

 * Refactoring of C# SDK 1.0 (to be more C#-compliant, like getters/setters)
 * If time allows: some talks about Tobi => technical and strategical relationship with the SDK, and discussions about WPF / !VisualStudio2008 / .NET3.5 (accessibility issues, etc.)

== Agenda ==

'''Topics''':

 * XUK
  * extensibility / processor fallback for model subclasses (see OASIS/DITA)
  * verbosity (structure and name abbreviations)
  * Progress events (as per Obi discussion for !XukIn / !XukOut progress bar)
 * C# refactoring / clean-up
 * Java maintenance (UML diagrams, possible future second implementation)
 * DAISY support: !NavMap, !NavLists, Skippable / Escapable etc.
 * Progress events for !XukIn !XukOut

== Minutes ==

=== XUK extensibility ===

OASIS / DITA: DataModelThoughts

To avoid confusion with W3C-DOM: the Urakawa SDK data model is a object-oriented hierarchy of classes, that can be serialized to XML (the XUK grammar) => this is where DOM is implicitly used (parsing / writing of XML content). However we could have chosen to serialize in binary format, in which case DOM would not play a role at all in the toolkit. In other words, the Urakawa data model does not aim at providing interoperability at the DOM level, and DOM does not solve any problem in the SDK, it just adds overhead (as a generalization mechanism). The Urakawa data model happens to look like a tree structure (i.e. !TreeNode), but actually it is more than that, with Project, Presentation, Factories, Managers, etc. So the data model is intrinsically linked to core functionality implemented by the classes, which is business logic that is not stored in XUK => XUK is just a mean to store an instance representation.

Main problem with XUK: Factories are used to create concrete classes while parsing, and factories are defined in the XUK file (at the Presentation level). In addition, the !DataModelFactory specifies a specific class that provides the Factories for Property, !TreeNode, etc. So when parsing a specialized XUK file (with unknown extensions) with the baseline toolkit, special factory subclasses implement the generation/creation of actual specialized classes.

==> Factories should NOT be extensible, this would remove the need for a !DataModelFactory (which was a useful fix to a problem we had, but not a well-thought design decision).

A header in the XUK file could define the hierarchy of types generated by a Factory.

Subclassing is good ONLY for the core Object-Oriented data blocks in the data model, NOT for the Factories, Managers, etc. because it greatly reduces flexibility (single-inheritance problems).

Emerging concern: !FileDataProvider is likely to be the only implementation ever existing of !DataProvider (unlikely: !MemoryDataProvider / !DatabaseDataProvider, etc.). => Simplification is possible (!FileDataProviderManager).

Technical issue: Java allows generic parametrized Class<T> whereas C# does not seem to with Type.

e.g. [source:tags/release-1.0/java/core/src/org/daisy/urakawa/property/WithProperties.java@latest#L24]
e.g. [source:tags/release-1.0/java/core/src/org/daisy/urakawa/property/channel/ChannelsPropertyImpl.java@latest#L72]

To be investigated (C# could parametrize the method directly, instead of the method parameter).

e.g.:

class !PropertyFactory {
public T create<T>() where T : Property {...}

Objective: developer only writes "!ObiProperty extends !XmlProperty" and the SDK handles the underlying business logic for realizing XUK round-tripping (i.e. create an instance of the !ObiProperty class from a fully qualified name from the XUK file). => instead of subclassing factories, simply use a type/class registration mechanism (lazy, when calling the create() method ?).

Support for legacy SDK 1.0 XUK content: XSLT transform to SDK 2.0 (i.e. add type hierarchy definition in Factories, etc.)

'''Whiteboard pictures'''

''Of potential new code of the !PropertyFactory sealed/final class''

[[Image(PropFactCodeWhiteBoardShot.JPG, 25%)]]

''Of the change in top level data model (Project/Presentation/Factories/Managers) from SDK 1.0 to SDK 2.0 - includes a bit of !PropertyFactory xuk xml''

[[Image(TopLevelDataModelChangeFrom10To20WhiteBoardShot.JPG, 25%)]]

=== DAY 2 === 

Lots of new code for the cancellable ProgressEvent framework for XukIn/Out.

== Action Items ==

=== @Ole+Daniel ===
 * #6 (Java) add/check !XukAble static getQName() (namespace + local)
 * #5 (C#) #6 (Java) Seal/Finalize classes: all Factories, all Managers
 * #10 (C#) #11 (Java) Replace !EnforceSinglePCMFormat functionality with generic and media agnostic design
 * #8 (C#) #9 (Java) Change !FileDataProviderFactory/Manager to !DataProviderFactory/Manager
 * #14 (C#) #15 (Java) Create new factory design

=== @Daniel ===
 * #12 Syncronize Java with latest C# code updates
 * #13 IInterfaces + remove *Impl (for XUK QName issues and C# compatibility)

=== @Ole ===
 * #4 (C#) Refactor SDK to better match C# coding conventions
 
